/* Autogenerated file. Do not edit manually. */

import { AccountInterface, shortString } from "starknet";
import { DojoProvider } from "@dojoengine/core";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
  function account() {
    const contract_name = "account";

    const create = async ({
      account,
      playerName,
    }: {
      account: AccountInterface;
      playerName: string;
    }) => {
      try {
        return await provider.execute(account, contract_name, "create", [
          provider.getWorldAddress(),
          playerName,
        ]);
      } catch (error) {
        console.error("Error executing create:", error);
        throw error;
      }
    };

    const spawn = async ({ account }: { account: AccountInterface }) => {
      try {
        return await provider.execute(account, contract_name, "spawn", [
          provider.getWorldAddress(),
        ]);
      } catch (error) {
        console.error("Error executing spawn:", error);
        throw error;
      }
    };

    return { create, spawn };
  }

  function market() {
    const contract_name = "market";

    const equip = async ({
      account,
      team_id,
      character_id,
      index,
    }: {
      account: AccountInterface;
      team_id: number;
      character_id: number;
      index: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "equip", [
          provider.getWorldAddress(),
          team_id,
          character_id,
          index,
        ]);
      } catch (error) {
        console.error("Error executing equip:", error);
        throw error;
      }
    };

    const hire = async ({
      account,
      team_id,
      index,
    }: {
      account: AccountInterface;
      team_id: number;
      index: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "hire", [
          provider.getWorldAddress(),
          team_id,
          index,
        ]);
      } catch (error) {
        console.error("Error executing hire:", error);
        throw error;
      }
    };

    const xp = async ({
      account,
      team_id,
      character_id,
      index,
    }: {
      account: AccountInterface;
      team_id: number;
      character_id: number;
      index: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "xp", [
          provider.getWorldAddress(),
          team_id,
          character_id,
          index,
        ]);
      } catch (error) {
        console.error("Error executing xp:", error);
        throw error;
      }
    };

    const merge = async ({
      account,
      team_id,
      from_id,
      to_id,
    }: {
      account: AccountInterface;
      team_id: number;
      from_id: number;
      to_id: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "merge", [
          provider.getWorldAddress(),
          team_id,
          from_id,
          to_id,
        ]);
      } catch (error) {
        console.error("Error executing merge:", error);
        throw error;
      }
    };

    const sell = async ({
      account,
      team_id,
      character_id,
    }: {
      account: AccountInterface;
      team_id: number;
      character_id: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "sell", [
          provider.getWorldAddress(),
          team_id,
          character_id,
        ]);
      } catch (error) {
        console.error("Error executing sell:", error);
        throw error;
      }
    };

    const reroll = async ({
      account,
      team_id,
    }: {
      account: AccountInterface;
      team_id: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "reroll", [
          provider.getWorldAddress(),
          team_id,
        ]);
      } catch (error) {
        console.error("Error executing reroll:", error);
        throw error;
      }
    };

    return { equip, hire, xp, merge, sell, reroll };
  }

  function battle() {
    const contract_name = "battle";

    const hydrate = async ({ account }: { account: AccountInterface }) => {
      try {
        return await provider.execute(account, contract_name, "hydrate", [
          provider.getWorldAddress(),
        ]);
      } catch (error) {
        console.error("Error executing create:", error);
        throw error;
      }
    };

    const start = async ({
      account,
      team_id,
      order,
    }: {
      account: AccountInterface;
      team_id: number;
      order: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "start", [
          provider.getWorldAddress(),
          team_id,
          order,
        ]);
      } catch (error) {
        console.error("Error executing create:", error);
        throw error;
      }
    };

    return { hydrate, start };
  }

  return {
    account: account(),
    market: market(),
    battle: battle(),
  };
}
