// Generated by dojo-bindgen on Fri, 5 Apr 2024 16:22:12 +0000. Do not modify this file manually.
using System;
using System.Threading.Tasks;
using Dojo;
using Dojo.Starknet;
using UnityEngine;
using dojo_bindings;

// System definitions for `zklash::systems::market::market` contract
public class MarketSystem : MonoBehaviour {
    // The address of this contract
    public string contractAddress;

    
    // Call the `equip` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> Equip(Account account, string world, uint team_id, byte character_id, byte index) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "equip",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(world).Inner,
                    new FieldElement(team_id).Inner,
                    new FieldElement(character_id).Inner,
                    new FieldElement(index).Inner
                }
            }
        });
    }
            

    
    // Call the `hire` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> Hire(Account account, string world, uint team_id, byte index) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "hire",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(world).Inner,
                    new FieldElement(team_id).Inner,
                    new FieldElement(index).Inner
                }
            }
        });
    }
            

    
    // Call the `reroll` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> Reroll(Account account, string world, uint team_id) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "reroll",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(world).Inner,
                    new FieldElement(team_id).Inner
                }
            }
        });
    }
            

    
    // Call the `dojo_resource` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> DojoResource(Account account) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "dojo_resource",
                calldata = new dojo.FieldElement[] {
                    
                }
            }
        });
    }
            
}
        